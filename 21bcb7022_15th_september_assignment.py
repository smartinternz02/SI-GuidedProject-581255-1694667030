# -*- coding: utf-8 -*-
"""21BCB7022_15th_september_assignment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hai8wkONo7NHrCPs3D1FLnd5Nmc-SxHe

## **15TH_SEPTEMBER_ASSIGNMENT**

NAME:-Thakur Akshath Singh


REG NO:- 21BCB7022

# Steps:
1.import the necessary libraries

2.import the dataset

3.Handling null values

4.outlier detection---surya

5.Seperate Dependent and independent variables

6.Encoding

7.splitting into training and testing set

8.Feature scaling

## 1.import the necessary libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

"""## 2.import the dataset"""

#.csv  .tsv ,json,.excel
dataset=pd.read_csv("Titanic-Dataset.csv")
#dataset=pd.read_csv(r"D:\SmartBridge\VIT_morning_slot\Churn_Modelling.csv")

dataset

dataset.head()

dataset.tail()

dataset.shape

dataset.info()

dataset.describe()

corr=dataset.corr()
corr

plt.subplots(figsize=(20,15))
sns.heatmap(corr,annot=True)

dataset.PassengerId.value_counts()

dataset.Survived.value_counts()

dataset.head()

dataset.	Pclass.value_counts()



"""## 3.Handling null values"""

dataset.isnull().any()

dataset.isnull().sum()

dataset["Age"].fillna(dataset["Age"].mean(),inplace=True)

dataset["Cabin"].fillna(dataset["Cabin"].mode()[0],inplace=True)

dataset["Embarked"].fillna(dataset["Embarked"].mode()[0],inplace=True)

dataset.isnull().sum()

dataset.head()

"""### 4.outliers"""

z_scores = np.abs(stats.zscore(dataset['Age']))
max_threshold=3
outliers = dataset['Age'][z_scores > max_threshold]

# Print and visualize the outliers
print("Outliers detected using Z-Score:")
print(outliers)

z_scores = np.abs(stats.zscore(dataset['Fare']))
max_threshold=3
outliers = dataset['Fare'][z_scores > max_threshold]

# Print and visualize the outliers
print("Outliers detected using Z-Score:")
print(outliers)

column_name = 'Fare'

# Calculate the first quartile (Q1) and third quartile (Q3)
Q1 = dataset[column_name].quantile(0.25)
Q3 = dataset[column_name].quantile(0.75)

# Calculate the IQR
IQR = Q3 - Q1

# Define the lower and upper bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Filter rows with values outside the IQR bounds
dataset_cleaned = dataset[(dataset[column_name] > lower_bound) & (dataset[column_name] <upper_bound)]

# Display the original and cleaned DataFrame sizes
print(f"Original DataFrame size: {dataset.shape}")
print(f"Cleaned DataFrame size: {dataset_cleaned.shape}")
dataset_cleaned

sns.boxplot(dataset.Age)

sns.boxplot(dataset_cleaned)

dataset=dataset_cleaned

x=dataset.drop('Survived', axis=1)
y=dataset['Survived']

x.head()

y.head()

"""## 5.Seperate dependent  and independent variables"""

#datset.iloc[rows,column]
x=dataset.iloc[:,3:13]
y=dataset.iloc[:,13:14]

x.head()

y.head()

dataset.shape

x.shape

y.shape

"""## 6.Encoding

### Label encoding on Gender column
"""

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()

x["Sex"]=le.fit_transform(x["Sex"])

x["Sex"]

x["Sex"].value_counts()

x["Sex"].nunique()

x.head()

x.Sex.value_counts()

"""### One hot encoding on geography column"""

x.shape

sex=pd.get_dummies(x["Sex"],drop_first=True)

sex

#concat
x=pd.concat([x,sex],axis=1)

x.head()

x.drop(["Sex"],axis=1,inplace=True)

x.head(10)

x.shape

"""### 7.splitting into training and testing set"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

a=[1,2,3,4,5,6]
b=[1,0,1,5,6,3]

for i in range(5):
    a_train,a_test,b_train,b_test=train_test_split(a,b,test_size=0.3,random_state=100)
    print("with random state",a_train)

a=[1,2,3,4,5,6]
b=[1,0,1,5,6,3]

for i in range(5):
    a_train,a_test,b_train,b_test=train_test_split(a,b,test_size=0.3)
    print("without random state",a_train)

"""### 8.Feature Scaling"""

scale = StandardScaler()
x[['Age', 'Fare']] = scale.fit_transform(x[['Age', 'Fare']])

x.head()

x_train

"""## **DATA VISUALIZATION**"""

sns.countplot(data=dataset, x='Survived')
plt.title('Survival Count')
plt.xlabel('Survived')
plt.ylabel('Count')
plt.show()

sns.histplot(data=dataset, x='Age', bins=20, kde=True)
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

sns.pairplot(data=dataset[['Fare', 'SibSp', 'Parch']])
plt.title('Pair Plot')
plt.show()

sns.boxplot(data=dataset, x='Fare')
plt.title('Fare Distribution')
plt.xlabel('Fare')
plt.show()

corr_matrix = dataset.corr()
sns.heatmap(corr_matrix, annot=True,cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()