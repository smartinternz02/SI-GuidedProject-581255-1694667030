# -*- coding: utf-8 -*-
"""22_assignment_21BCB7022

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xFQWCeUghi5ZkfxN3wu-KdRTXkEJSCCa

NAME:Thakur Akshath Singh

REG NO: 21BCB7022

1.Download the Employee Attrition Dataset

https://www.kaggle.com/datasets/patelprashant/employee-attrition

2.Perfrom Data Preprocessing

3.Model Building using Logistic Regression and Decision Tree and Random Forest

4.Calculate Performance metrics
"""

#Import the Libraries.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Importing the dataset.
df=pd.read_csv("Employee-Attrition.csv")

df.head()

df.shape

df.Age.value_counts()

df.info()

df.describe()

#Checking for Null Values.
df.isnull().any()

df.isnull().sum()

#Data Visualization.
sns.distplot(df["YearsWithCurrManager"])

df.corr()

df.head()

plt.subplots(figsize = (25,25))
sns.heatmap(df.corr(),annot=True)

sns.boxplot(df.YearsWithCurrManager)

from scipy import stats
z_scores = np.abs(stats.zscore(df['YearsWithCurrManager']))
max_threshold=3
outliers = df['YearsWithCurrManager'][z_scores > max_threshold]

# Print and visualize the outliers
print("Outliers detected using Z-Score:")
print(outliers)

q1 = df.YearsWithCurrManager.quantile(0.25)
q3 = df.YearsWithCurrManager.quantile(0.75)
print(q1)
print(q3)
upperlimit = q3+1.5*(q3-q1)
upperlimit
lowerlimit = q1-1.5*(q3-q1)
lowerlimit
df.median()
df["YearsWithCurrManager"]=np.where(df["YearsWithCurrManager"]>upperlimit,14,df['YearsWithCurrManager'])
sns.boxplot(df.YearsWithCurrManager)

from scipy import stats
z_scores = np.abs(stats.zscore(df['YearsWithCurrManager']))
max_threshold=3
outliers = df['YearsWithCurrManager'][z_scores > max_threshold]

# Print and visualize the outliers
print("Outliers detected using Z-Score:")
print(outliers)

df.head()

x=df.drop('Attrition',axis=1)
x.head()

y=df.Attrition
y.head()

#label encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
x.BusinessTravel	=le.fit_transform(x.BusinessTravel	)
x.head()
x.Department	=le.fit_transform(x.Department	)
x.head()
x.EducationField	=le.fit_transform(x.EducationField	)
x.head()
x.Gender=le.fit_transform(x.Gender)
x.head()
x.JobRole	=le.fit_transform(x.JobRole	)
x.head()
x.MaritalStatus	=le.fit_transform(x.MaritalStatus	)
x.head()
x.Over18	=le.fit_transform(x.Over18	)
x.head()
x.OverTime	=le.fit_transform(x.OverTime	)
x.head()

df.columns

#feature scaling
from sklearn.preprocessing import MinMaxScaler
ms=MinMaxScaler()
x_scaled=pd.DataFrame(ms.fit_transform(x),columns=x.columns)

x_scaled

#Splitting Data into Train and Test.
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x_scaled,y,test_size=0.2,random_state=0)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

x_train.head()

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()

model.fit(x_train,y_train)
pred=model.predict(x_test)
pred

#label encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)

y_test

df

"""# Evaluation of classification model"""

#Accuracy score
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report,roc_auc_score,roc_curve

accuracy_score(y_test,pred)

confusion_matrix(y_test,pred)

pd.crosstab(y_test,pred)

"""### Roc-AUC curve"""

probability=model.predict_proba(x_test)[:,1]
probability

#label encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y_test=le.fit_transform(y_test)

# roc_curve
fpr,tpr,threshsholds = roc_curve(y_test,probability)

plt.plot(fpr,tpr)
plt.xlabel('FPR')
plt.ylabel('TPR')
plt.title('ROC CURVE')
plt.show()

"""### DecisionTreeClassifier"""

from sklearn.tree import DecisionTreeClassifier
dtc=DecisionTreeClassifier()

dtc.fit(x_train,y_train)

pred=dtc.predict(x_test)

pred

y_test

df

"""# Evaluation of classification model

"""

#Accuracy score
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report,roc_auc_score,roc_curve

#label encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)
#label encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
pred=le.fit_transform(pred)

y_test

accuracy_score(y_test,pred)

confusion_matrix(y_test,pred)

pd.crosstab(y_test,pred)

print(classification_report(y_test,pred))

"""### Roc-AUC curve"""

probability=dtc.predict_proba(x_test)[:,1]

probability

fpr,tpr,thresholds =  roc_curve(y_test,probability)

plt.plot(fpr,tpr)
plt.xlabel('FPR')
plt.ylabel('TPR')
plt.title('ROC CURVE')
plt.show()

from sklearn import tree
plt.figure(figsize=(25,15))
tree.plot_tree(dtc,filled=True)

from sklearn.model_selection import GridSearchCV
parameter={
 'criterion':['gini','entropy'],
  'splitter':['best','random'],
  'max_depth':[1,2,3,4,5],
  'max_features':['auto', 'sqrt', 'log2']

}

grid_search=GridSearchCV(estimator=dtc,param_grid=parameter,cv=5,scoring="accuracy")

grid_search.fit(x_train,y_train)

grid_search.best_params_

dtc_cv=DecisionTreeClassifier(criterion= 'entropy',
 max_depth=3,
 max_features='sqrt',
 splitter='best')
dtc_cv.fit(x_train,y_train)

pred=dtc_cv.predict(x_test)

#label encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)
#label encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
pred=le.fit_transform(pred)

print(classification_report(y_test,pred))

"""**RandomForestClassifier**"""

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier()

forest_params = [{'max_depth': list(range(10, 15)), 'max_features': list(range(0,14))}]

rfc_cv= GridSearchCV(rfc,param_grid=forest_params,cv=10,scoring="accuracy")

rfc_cv.fit(x_train,y_train)

pred=rfc_cv.predict(x_test)

#label encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
y=le.fit_transform(y)
#label encoding
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
pred=le.fit_transform(pred)

print(classification_report(y_test,pred))

rfc_cv.best_params_